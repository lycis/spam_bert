name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write   # needed for GHCR push

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-binaries:
    name: Build single-file binaries (Windows)
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        python-version: [ "3.11" ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install -e .

      # Build via *module* entrypoint and collect data so transformers/tokenizers work when frozen
      - name: Build binary with PyInstaller
        # Windows default shell is PowerShell; use backticks for line continuation
        run: |
          pyinstaller --onefile -m spam_bert --name spam-bert `
            --collect-submodules transformers `
            --collect-data transformers `
            --collect-data tokenizers `
            --collect-data certifi
          python -c "import glob; print('Built:', glob.glob('dist/*'))"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: spam-bert-${{ runner.os }}
          path: |
            dist/spam-bert.exe
            dist/spam-bert
          if-no-files-found: ignore

  docker:
    name: Build & push Docker image (multi-arch)
    runs-on: ubuntu-latest
    needs: build-binaries
    timeout-minutes: 120
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: meta
        run: |
          ref="${GITHUB_REF##*/}"           # e.g. v1.2.3
          echo "version=${ref}" >> $GITHUB_OUTPUT
          echo "version_no_v=${ref#v}" >> $GITHUB_OUTPUT

      # QEMU is required to cross-build arm64 on amd64 runner
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Use registry-backed cache to avoid SAS URL expiry + keep GHA cache as secondary
      - name: Build & push Docker image (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=Spam BERT Detector
            org.opencontainers.image.description=BERT-powered spam/ham classifier (CLI + REST API)
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

          # Primary cache in GHCR (persistent, no short-lived SAS)
          cache-from: |
            type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
            type=gha
          cache-to: |
            type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max,ignore-error=true

          provenance: false
          sbom: false

  create-release:
    name: Create GitHub Release & attach artifacts
    needs: [build-binaries, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: spam-bert-*
          path: ./artifacts
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
